{{#methods.length}}
import {
  Nullable,
  Write,
  WriteSizer,
  WriteEncoder,
  ReadDecoder
} from "@namestyorg/wasm-as";

{{#methods}}
export class Input_{{name}} {
  {{#arguments}}
  {{name}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}};
  {{/arguments}}
}

export function serialize{{name}}Args(input: Input_{{name}}): ArrayBuffer {
  const sizer = new WriteSizer();
  write{{name}}Args(sizer, input);
  const buffer = new ArrayBuffer(sizer.length);
  const encoder = new WriteEncoder(buffer);
  write{{name}}Args(encoder, input);
  return buffer;
}

function write{{name}}Args(
  writer: Write,
  input: Input_{{name}}
): void {
  writer.writeMapLength({{arguments.length}});
  {{#arguments}}
  writer.writeString("{{name}}");
  {{#scalar}}
  writer.write{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}(input.{{name}});
  {{/scalar}}
  {{#array}}
  writer.write{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}(input.{{name}}, (writer: Write, item: {{#item}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/item}}): void => {
    {{> serialize_array}}
  });
  {{/array}}
  {{/arguments}}
}

export function deserialize{{name}}Result(buffer: ArrayBuffer): {{#return}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}} {
  const reader = new ReadDecoder(buffer);
  {{#return}}
  {{#scalar}}
  return reader.read{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}();
  {{/scalar}}
  {{#array}}
  return reader.read{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}((reader: Read): {{#item}}{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/item}} => {
    {{> deserialize_array}}
  });
  {{/array}}
  {{/return}}
}
{{^last}}

{{/last}}
{{/methods}}
{{/methods.length}}
